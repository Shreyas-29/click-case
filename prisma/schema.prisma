// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OrderStatus {
  shipped
  fulfilled
  awaiting_shipment
}

enum PhoneModel {
  iphonex
  iphone11
  iphone12
  iphone12_mini
  iphone12_pro
  iphone12_pro_max
  iphone13
  iphone13_mini
  iphone13_pro
  iphone13_pro_max
  iphone14
  iphone14_plus
  iphone14_pro
  iphone14_pro_max
  iphone15

  samsung_s21
  samsung_s21_plus
  samsung_s21_ultra
  samsung_s22
  samsung_s22_plus
  samsung_s22_ultra
  samsung_s23
  samsung_s23_plus
  samsung_s23_ultra
  samsung_s24
  samsung_s24_plus
  samsung_s24_ultra
}

enum CaseMaterial {
  metal
  leather
  sillicone
  carbon_fiber
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
  matte
  glossy
  transparent
  frosted
  brushed
}

enum CaseColor {
  black
  blue
  rose
  green
  orange
  red
  yellow
  purple
  pink
  brown
  gray
  emerald
  skin
  lime
  sky
  white
  transparent
}

model User {
  id    String  @id @default(cuid()) @map("_id")
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model Configuration {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  width           Int
  height          Int
  url             String
  model           PhoneModel?
  material        CaseMaterial?
  finish          CaseFinish?
  color           CaseColor?
  order           Order[]
  croppedImageUrl String?
}

model Order {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  configurationId String  @db.ObjectId
  userId          String
  amount          Float
  isPaid          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user              User             @relation(fields: [userId], references: [id])
  configuration     Configuration    @relation(fields: [configurationId], references: [id])
  status            OrderStatus      @default(awaiting_shipment)
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  billingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  shippingAddressId String?          @db.ObjectId
  billingAddressId  String?          @db.ObjectId
}

model ShippingAddress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  street      String
  postalCode  String
  country     String
  city        String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  street      String
  postalCode  String
  country     String
  city        String
  state       String?
  phoneNumber String?
  orders      Order[]
}
